@page "/pr-analyzer"
@using CodeReviewBot.UI.AIReview.UI.Services
@using Blazor.Markdown
@inject PRAnalysisService PRService
@rendermode InteractiveServer


<h3>GitHub PR Analyzer</h3>

<input @bind="repo" placeholder="PR Url" />
<button @onclick="Analyze" disabled="@isAnalyzing">Analyze</button>

@if (isAnalyzing)
{
    <p>Analyzing the pull request, please wait...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red;"><strong>Error:</strong> @errorMessage</p>
}
else @if (!string.IsNullOrEmpty(analysisResultFormatted))
{
    <br />
    @((MarkupString)analysisResultFormatted)
}

@code {

    private string analysisResultFormatted = string.Empty;
    private string repo = string.Empty;
    private bool isAnalyzing = false;
    private string errorMessage = string.Empty;


    private async Task Analyze()
    {
        isAnalyzing = true;

        try
        {
            var rawAnalysis = await PRService.AnalyzePR(repo);

            // Clean up and prepare the HTML for rendering
            analysisResultFormatted = rawAnalysis
                .Trim('"')                     // Removes extra leading/trailing double quotes
                .Replace("\\r\\n", "\n")        // Preserve new lines
                .Replace("\\n", "\n")           // Ensure additional new lines render properly
                .Replace("\\\"", "\"");         // Fix escaped double quotes
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during analysis: {ex.Message}";
        }
        finally
        {
            isAnalyzing = false;
        }
    }
}