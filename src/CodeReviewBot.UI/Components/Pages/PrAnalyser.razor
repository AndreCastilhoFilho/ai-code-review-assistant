@page "/pr-analyzer"
@using CodeReviewBot.API.Shared
@using CodeReviewBot.UI.AIReview.UI.Services
@using Blazor.Markdown
@inject PRAnalysisService PRService
@rendermode InteractiveServer


<h3>GitHub PR Analyzer</h3>

<input @bind="repo" @bind:event="oninput" placeholder="Enter GitHub PR URL..." class="form-control" />

<select @bind="SelectedModel">
    @foreach (var model in Enum.GetValues<AiModelType>())
    {
        <option value="@model">@model</option>
    }
</select>

<button @onclick="Analyze" disabled="@(!IsValidUrl || isAnalyzing)"> @(isAnalyzing ? "Analyzing..." : "Analyze")</button>


@if (isAnalyzing)
{
    <p>Analyzing the pull request, please wait...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red;"><strong>Error:</strong> @errorMessage</p>
}
else @if (!string.IsNullOrEmpty(analysisResultFormatted))
{
    <br />
    @((MarkupString)analysisResultFormatted)
}

@code {

    private string analysisResultFormatted = string.Empty;
    private string repo = string.Empty;
    private bool isAnalyzing = false;
    private string errorMessage = string.Empty;
    private AiModelType SelectedModel = AiModelType.HuggingFace;
    private bool IsValidUrl => IsValidGitHubPrUrl(repo);

    private async Task Analyze()
    {
        if (!IsValidUrl || isAnalyzing) return;

        isAnalyzing = true;

        try
        {
            var rawAnalysis = await PRService.AnalyzePR(repo, SelectedModel);

            // Clean up and prepare the HTML for rendering
            analysisResultFormatted = rawAnalysis
                .Trim('"')                     // Removes extra leading/trailing double quotes
                .Replace("\\r\\n", "\n")        // Preserve new lines
                .Replace("\\n", "\n")           // Ensure additional new lines render properly
                .Replace("\\\"", "\"");         // Fix escaped double quotes
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during analysis: {ex.Message}";
        }
        finally
        {
            isAnalyzing = false;
        }
    }

    // Function to validate GitHub PR URLs
    private bool IsValidGitHubPrUrl(string url)
    {
        if (string.IsNullOrWhiteSpace(url)) return false;

        try
        {
            var uri = new Uri(url);
            return uri.Host == "github.com" && uri.AbsolutePath.Contains("/pull/");
        }
        catch
        {
            return false;
        }
    }
}