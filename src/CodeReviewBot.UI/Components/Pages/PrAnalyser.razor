@page "/pr-analyzer"
@using CodeReviewBot.UI.AIReview.UI.Services
@inject PRAnalysisService PRService
@rendermode InteractiveServer


<h3>GitHub PR Analyzer</h3>

<input @bind="repo" placeholder="PR Url" />
<button @onclick="Analyze" disabled="@isAnalyzing">Analyze</button>

@if (isAnalyzing)
{
    <p>Analyzing the pull request, please wait...</p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color:red;"><strong>Error:</strong> @errorMessage</p>
}
else @if (!string.IsNullOrEmpty(analysisResultFormatted.ToString()))
{  
    <p>@analysisResultFormatted</p>
}

@code {

    private MarkupString analysisResultFormatted;
    private string repo;  
    private bool isAnalyzing = false;
    private string errorMessage;


    private async Task Analyze()
    {
        isAnalyzing = true;
       
        errorMessage = null;

        try
        {
            var rawAnalysis = await PRService.AnalyzePR(repo);
            // Remove unnecessary JSON escaping
            rawAnalysis = rawAnalysis
                .Trim('"')                     // Removes extra leading/trailing double quotes
                .Replace("\\r\\n", "<br>")      // Converts escaped newlines to actual line breaks
                .Replace("\\n", "<br>")         // Handle any additional escaped newlines
                .Replace("\\\"", "\"");         // Fix escaped double quotes

            // Convert to MarkupString for correct HTML rendering
            analysisResultFormatted = new MarkupString(rawAnalysis);
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred during analysis: {ex.Message}";
        }
        finally
        {
            isAnalyzing = false;
        }
    }
}